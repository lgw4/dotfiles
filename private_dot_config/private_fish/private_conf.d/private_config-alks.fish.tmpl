if test -d "$HOME/.config/alks"
    set -x ALKS_DB $HOME/.config/alks/alks.db
end

function alks -d "Add set -lx NO_COLOR true to alks commands"
    set -lx NO_COLOR true
    command alks $argv
end

if test -f $HOME/.config/tabtab/__tabtab.fish
    source $HOME/.config/tabtab/__tabtab.fish
end

function alks-artifactory-np -d "Open ALKS session to Artifactory non-production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "w7k6gsrwhreczd6r6o57ys43wy").details.notesPlain }}")
end

function alks-artifactory-prod -d "Open ALKS session to Artifactory production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "2s4dygls7vby5grgigfts4wd6i").details.notesPlain }}")
end

function alks-cloud-management-dev -d "Open ALKS session to Cloud Management dev"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "eyafx3yvtnafdiewtukllevcmy").details.notesPlain }}")
end

function alks-cloud-management-dev2 -d "Open ALKS session to Cloud Management dev2"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "oyqcdm7fgbabxjlc2xqn7t55cu").details.notesPlain }}")
end

function alks-cloud-management-np -d "Open ALKS session to Cloud Management non-production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "dby7h6k5mrhkhnkjhlpe763ayy").details.notesPlain }}")
end

function alks-cloud-management-prod -d "Open ALKS session to Cloud Management production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "v5wsgqjjezdabir6bc6al5gkem").details.notesPlain }}")
end

function alks-cots-np -d "Open ALKS session to COTS non-production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "l5suvzdc7jbijct3ewhyrp6rdq").details.notesPlain }}")
end

function alks-cots-prod -d "Open ALKS session to COTS production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "lpprhx6bgjdurpgruox4c3rc24").details.notesPlain }}")
end

function alks-ghes-np -d "Open ALKS session to GHES non-production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "l6wlu6bbkjgiljjbtgbedzfk4a").details.notesPlain }}")
end

function alks-ghes-prod -d "Open ALKS session to GHES production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "alzkq4cc4baltjvhvlqt3h72pm").details.notesPlain }}")
end

function alks-ghes-runners-np -d "Open ALKS session to GHES Runners non-production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "tpa6yqy6abar3ofrjr2lpcretu").details.notesPlain }}")
end

function alks-ghes-runners-prod -d "Open ALKS session to GHES Runners production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "gc2s3c3gfvhypgwfg6ybz4y2hm").details.notesPlain }}")
end

function alks-labs-224 -d "Open ALKS session to Labs224"
    eval (alks sessions open -i -r LabAdmin -a "{{ (onepassword "5n7yjzeeqnfudilpuzscr6vovu").details.notesPlain }}")
end

function alks-splunk-np -d "Open ALKS session to Splunk non-production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "ysk6c4pvbfekdc3lnzllf2c6a4").details.notesPlain }}")
end

function alks-splunk-prod -d "Open ALKS session to Splunk production"
    eval (alks sessions open -i -N -r Admin -a "{{ (onepassword "uqym5wm6t5djrfz2nj5cw6mjx4").details.notesPlain }}")
end

function alks-disconnect -d "Disconnect any active ALKS session"
    set -e AWS_ACCESS_KEY_ID
    set -e AWS_SECRET_ACCESS_KEY
    set -e AWS_SESSION_EXPIRES
    set -e AWS_SESSION_TOKEN
end

function aws-instance-id -d "Get AWS instance ID"
    set -lx PREFIX $argv[1]
    set -lx REGION $argv[2]
    aws ec2 describe-instances \
        --region $REGION \
        --filters Name=instance-state-name,Values=running "Name=tag:Name,Values=$PREFIX*" \
        --query "Reservations[0].Instances[0].InstanceId" \
        --output text
end

function aws-shell -d "Open AWS shell session"
    set -lx PREFIX $argv[1]
    set -lx REGION $argv[2]
    set -lx INSTANCE_ID (aws-instance-id $PREFIX $REGION)
    aws ssm start-session --region $REGION --target $INSTANCE_ID
end

function ghes-tunnel -d "Open GHES tunnel for management console"
    set -lx PREFIX $argv[1]
    set -lx REGION $argv[2]
    set -lx INSTANCE_ID (aws-instance-id $PREFIX $REGION)
    aws secretsmanager get-secret-value \
        --region us-east-1 \
        --secret-id ghe_mc_password \
        --query SecretString \
        --output text | pbcopy
    printf "The Management Console password has been copied to your clipboard.\n"
    aws ssm start-session \
        --region $REGION \
        --target $INSTANCE_ID \
        --document-name AWS-StartPortForwardingSession \
        --parameters '{"portNumber":["8443"],"localPortNumber":["8443"]}'
end
